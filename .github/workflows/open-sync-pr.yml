# .github/workflows/open-sync-pr.yml
name: Open back-merge PR master→develop
on:
  push:
    branches: [master]
  workflow_dispatch: {}

jobs:
  open-pr:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    concurrency:
      group: sync-master-to-develop
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect release merge and extract version
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          MSG=$(git log -1 --pretty=%B)
          echo "Last commit message:\n$MSG"
          # Match forms like: chore(release): v1.2.3 or Release v1.2.3
          if [[ "$MSG" =~ ([vV]?[0-9]+\.[0-9]+\.[0-9]+) ]]; then
            raw="${BASH_REMATCH[1]}"
            raw=${raw#v}
            echo "version=$raw" >> "$GITHUB_OUTPUT"
            echo "Detected version: $raw"
          fi
      - name: Create tag vX.Y.Z
        if: steps.detect.outputs.version != ''
        env:
          VERSION: ${{ steps.detect.outputs.version }}
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: github-actions@github.com
          GIT_COMMITTER_NAME: github-actions
          GIT_COMMITTER_EMAIL: github-actions@github.com
        run: |
          set -euo pipefail
          TAG="v$VERSION"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG já existe; pulando criação."
          else
            git tag -a "$TAG" -m "chore(release): $TAG" "$GITHUB_SHA"
            git push origin "$TAG"
          fi
      - name: Create GitHub Release
        if: steps.detect.outputs.version != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.detect.outputs.version }}
          name: v${{ steps.detect.outputs.version }}
          generate_release_notes: true
      - name: Open PR from master to develop
        uses: repo-sync/pull-request@v2
        with:
          source_branch: "master"
          destination_branch: "develop"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_allow_empty: true
          pr_title: "chore(sync): back-merge master → develop"
          pr_body: |
            PR automática de sincronização após merge na **master**.
            - Verificar conflitos
            - Conferir versão/changelog
            - Rodar testes
          pr_label: "sync,chore"
